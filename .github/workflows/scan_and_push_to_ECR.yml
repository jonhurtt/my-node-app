name: Scan Image and Push to ECR

on: [ push, workflow_dispatch ]

env:
    IMAGE_NAME: ${{ github.repository }}:${{ github.sha }}

jobs:
    build_and_scan:
        name: Build and Scan image
        runs-on: ubuntu-latest
        
        steps:
            - name: Check out the repository
              uses: actions/checkout@master
            
            - name: Build the image
              run: docker build -t $IMAGE_NAME .
            
            - name: Prisma Cloud image scan
              id: scan
              uses: PaloAltoNetworks/prisma-cloud-scan@v1.5
              with:
                  pcc_console_url: ${{ secrets.PCC_CONSOLE_URL }}
                  pcc_user: ${{ secrets.PCC_USER }}
                  pcc_pass: ${{ secrets.PCC_PASS }}
                  image_name: ${{ env.IMAGE_NAME }}
                  #containerized: true
                  
            # (Optional) for compatibility with GitHub's code scanning alerts
            - name: Upload SARIF file
              if: ${{ always() }} # necessary if using failure thresholds in the image scan
              uses: github/codeql-action/upload-sarif@v2
              with:
                sarif_file: ${{ steps.scan.outputs.sarif_file }}
                
    build_and_push:
        name: Build Image and Push to ECR
        runs-on: ubuntu-latest
        needs: build_and_scan
        
        steps:
            - name: Set current date as env variable
              run: echo "DATE=$(date +'%Y%m%d_%H%M')" >> $GITHUB_ENV

            - name: Check out code
              uses: actions/checkout@master
              
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@master
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1
            
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2
              
            - name: Build, tag, and push image to Amazon ECR
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: ecr_image_repository
                IMAGE_TAG: dockerfile_image_${{ github.event.repository.name }}_${{ env.DATE }}
              run: |
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG                  